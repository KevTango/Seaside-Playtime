library IEEE;
use  IEEE.STD_LOGIC_1164.all;
use  IEEE.STD_LOGIC_ARITH.all;
use  IEEE.STD_LOGIC_UNSIGNED.all;

entity start_screen is
	port(
		pixel_row, pixel_column : in std_logic_vector(5 downto 0);
		Clk, Enable : in std_logic;
		startscreen_output : out std_logic
	);
end entity start_screen;

architecture behaviour of start_screen is
component char_rom
		PORT(	
		character_address		:	IN STD_LOGIC_VECTOR (5 DOWNTO 0);
		font_row, font_col	:	IN STD_LOGIC_VECTOR (2 DOWNTO 0);
		clock						: 	IN STD_LOGIC;
		rom_mux_output			:	OUT STD_LOGIC
	);
	end component;
signal char_add : std_logic_vector(5 downto 0);
signal char_row, char_col : std_logic_vector(2 downto 0);
begin
	Char: char_rom
		port map (clock => clk, character_address => char_add, font_row => char_row, font_col => char_col, rom_mux_output => startscreen_output);
process(Clk, pixel_row, pixel_column)
begin
	if (enable = '1') then
		if (pixel_column >= 288 and pixel_column < 304 and pixel_row >= 224 and pixel_row < 240) then
			char_add <= "010011";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 304 and pixel_column < 320 and pixel_row >= 224 and pixel_row < 240) then
			char_add <= "010100";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 320 and pixel_column < 336 and pixel_row >= 224 and pixel_row < 240) then
			char_add <= "000001";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 336 and pixel_column < 352 and pixel_row >= 224 and pixel_row < 240) then
			char_add <= "010010";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 352 and pixel_column < 368 and pixel_row >= 224 and pixel_row < 240) then
			char_add <= "010100";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 288 and pixel_column < 304 and pixel_row >= 240 and pixel_row < 256) then
			char_add <= "010011";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 304 and pixel_column < 320 and pixel_row >= 240 and pixel_row < 256) then
			char_add <= "000011";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 320 and pixel_column < 336 and pixel_row >= 240 and pixel_row < 256) then
			char_add <= "010010";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 336 and pixel_column < 352 and pixel_row >= 240 and pixel_row < 256) then
			char_add <= "000101";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 352 and pixel_column < 368 and pixel_row >= 240 and pixel_row < 256) then
			char_add <= "000101";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		elsif (pixel_column >= 352 and pixel_column < 368 and pixel_row >= 240 and pixel_row < 256) then
			char_add <= "010000";
			char_row <= pixel_row(3 downto 1);
			char_col <= pixel_column(3 downto 1);
		else
			char_row <= "000";
			char_col <= "000";
		end if;
	else
		char_row <= "000";
		char_col <= "000";
	end if;
end process;
end architecture behaviour;